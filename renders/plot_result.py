import numpy as np
import matplotlib.pyplot as plt


# load result
npos_buf = np.load('./result/npos.npy')
epos_buf = np.load('./result/epos.npy')
altitude_buf = np.load('./result/altitude.npy')

roll_buf = np.load('./result/roll.npy')
pitch_buf = np.load('./result/pitch.npy')
yaw_buf = np.load('./result/yaw.npy')
yaw_rate_buf = np.load('./result/yaw_rate.npy')

roll_dem_buf = np.load('./result/roll_dem.npy')
pitch_dem_buf = np.load('./result/pitch_dem.npy')
yaw_rate_dem_buf = np.load('./result/yaw_rate_dem.npy')

vt_buf = np.load('./result/vt.npy')
alpha_buf = np.load('./result/alpha.npy')
G_buf = np.load('./result/G.npy')

T_buf = np.load('./result/T.npy')
throttle_buf = np.load('./result/throttle.npy')
ail_buf = np.load('./result/ail.npy')
el_buf = np.load('./result/el.npy')
rud_buf = np.load('./result/rud.npy')

target_altitude_buf = np.load('./result/target_altitude.npy')
target_heading_buf = np.load('./result/target_heading.npy')
target_vt_buf = np.load('./result/target_vt.npy')

# plot result
plt.plot(epos_buf, npos_buf, color='r')
plt.xlabel('epos/feet')
plt.ylabel('npos/feet')
plt.title('position')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, altitude_buf[1:], color='r', label='real')
plt.plot(t, target_altitude_buf[1:], color='b', label='target')
plt.legend()
plt.xlabel("time/0.02s")
plt.ylabel("altitude/feet")
plt.title('altitude')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, vt_buf[1:], color='r', label='real')
plt.plot(t, target_vt_buf[1:], color='b', label='target')
plt.legend()
plt.xlabel("time/0.02s")
plt.ylabel("vt/feet")
plt.title('vt')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, roll_buf[1:] * 180 / np.pi, color='b', label='real')
plt.plot(t, roll_dem_buf[1:] * 180 / np.pi, color='r', label='demand')
plt.legend()
plt.xlabel("time/0.02s")
plt.ylabel("roll/deg")
plt.title('roll')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, pitch_buf[1:] * 180 / np.pi, color='b', label='real')
plt.plot(t, pitch_dem_buf[1:] * 180 / np.pi, color='r', label='demand')
plt.legend()
plt.xlabel("time/0.02s")
plt.ylabel("pitch/deg")
plt.title('pitch')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, yaw_buf[1:] * 180 / np.pi, color='b', label='real')
plt.plot(t, target_heading_buf[1:] * 180 / np.pi, color='r', label='target')
plt.legend()
plt.xlabel("time/0.02s")
plt.ylabel("yaw/deg")
plt.title('yaw')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, yaw_rate_buf[1:] * 180 / np.pi, color='b', label='real')
plt.plot(t, yaw_rate_dem_buf[1:] * 180 / np.pi, color='r', label='demand')
plt.legend()
plt.xlabel("time/0.02s")
plt.ylabel("yaw_rate/deg/s")
plt.title('yaw_rate')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, T_buf[1:], color='k')
plt.xlabel("time/0.02s")
plt.ylabel("T/lbf")
plt.title('T')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, 100 * throttle_buf[1:], color='k')
plt.xlabel("time/0.02s")
plt.ylabel("throttle/%")
plt.title('throttle')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, el_buf[1:], color='k')
plt.xlabel("time/0.02s")
plt.ylabel("el/deg")
plt.title('el')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, ail_buf[1:], color='k')
plt.xlabel("time/0.02s")
plt.ylabel("ail/deg")
plt.title('ail')
plt.show()

t = np.arange(altitude_buf.shape[0] - 1)
plt.plot(t, rud_buf[1:], color='k')
plt.xlabel("time/0.02s")
plt.ylabel("rud/deg")
plt.title('rud')
plt.show()
